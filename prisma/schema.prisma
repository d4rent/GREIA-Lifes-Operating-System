generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  properties    Property[]    @relation("PropertyOwner")
  bookings      Booking[]
  reviews       Review[]
  messages      Message[]     @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  price       Float
  location    String
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  amenities   String[]
  images      String[]
  bedrooms    Int
  bathrooms   Int
  maxGuests   Int
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       User      @relation("PropertyOwner", fields: [ownerId], references: [id])
  bookings    Booking[]
  reviews     Review[]
}

model Booking {
  id          String    @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  userId      String
  propertyId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  property    Property  @relation(fields: [propertyId], references: [id])
  payment     Payment?
}

model Payment {
  id          String    @id @default(cuid())
  amount      Float
  currency    String
  status      PaymentStatus
  stripeId    String?
  bookingId   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  booking     Booking   @relation(fields: [bookingId], references: [id])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String    @db.Text
  userId      String
  propertyId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  property    Property  @relation(fields: [propertyId], references: [id])
}

model Message {
  id          String    @id @default(cuid())
  content     String    @db.Text
  senderId    String
  receiverId  String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id])
}

enum Role {
  USER
  HOST
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  VILLA
  PENTHOUSE
  CHALET
}

enum PropertyStatus {
  AVAILABLE
  UNAVAILABLE
  MAINTENANCE
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}