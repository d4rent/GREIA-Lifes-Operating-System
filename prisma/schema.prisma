// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models...
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Social Features
model Post {
  id          String      @id @default(cuid())
  content     String
  type        PostType    @default(STANDARD)
  visibility  Visibility  @default(PUBLIC)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Media
  media       PostMedia[]
  
  // Engagement
  likes       Like[]
  comments    Comment[]
  shares      Share[]
  
  // Relations
  user        User        @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  
  // Story specific fields
  expiresAt   DateTime?   // For stories
  
  // Location
  location    String?
  latitude    Float?
  longitude   Float?
  
  // Tags and mentions
  hashtags    String[]
  mentions    String[]    // User IDs
  
  // Stats
  viewCount   Int         @default(0)
  likeCount   Int         @default(0)
  commentCount Int        @default(0)
  shareCount  Int         @default(0)
}

model PostMedia {
  id          String    @id @default(cuid())
  postId      String
  type        MediaType
  url         String
  thumbnail   String?
  width       Int?
  height      Int?
  duration    Float?    // For videos
  order       Int       @default(0)
  
  // Relations
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  postId      String
  userId      String
  parentId    String?   // For nested comments
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  likes       Like[]
  
  // Stats
  likeCount   Int       @default(0)
  replyCount  Int       @default(0)
}

model Like {
  id          String    @id @default(cuid())
  userId      String
  postId      String?
  commentId   String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Share {
  id          String    @id @default(cuid())
  userId      String
  postId      String
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id            String    @id @default(cuid())
  followerId    String
  followingId   String
  createdAt     DateTime  @default(now())
  
  // Relations
  follower      User      @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following     User      @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

// Live Listings
model LiveListing {
  id          String        @id @default(cuid())
  type        ListingType
  category    ListingCategory
  title       String
  description String
  price       Float?
  status      ListingStatus @default(ACTIVE)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Media
  media       ListingMedia[]
  
  // Location
  location    String
  latitude    Float
  longitude   Float
  
  // Property specific
  propertyType String?
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  furnished   Boolean?
  
  // Service specific
  serviceType String?
  availability Json?        // Available times/dates
  duration    Int?         // In minutes
  
  // Leisure specific
  leisureType String?
  startDate   DateTime?
  endDate     DateTime?
  capacity    Int?
  
  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  inquiries   Inquiry[]
  reviews     Review[]
  
  // Stats
  viewCount   Int           @default(0)
  bookmarkCount Int         @default(0)
  inquiryCount Int          @default(0)
}

model ListingMedia {
  id          String    @id @default(cuid())
  listingId   String
  type        MediaType
  url         String
  thumbnail   String?
  width       Int?
  height      Int?
  order       Int       @default(0)
  
  // Relations
  listing     LiveListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

// News Feed
model NewsArticle {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  summary     String?
  source      String?
  sourceUrl   String?
  imageUrl    String?
  category    NewsCategory
  tags        String[]
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  
  // Stats
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  commentCount Int      @default(0)
}

// Enums
enum PostType {
  STANDARD
  STORY
  ARTICLE
  POLL
  EVENT
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum ListingType {
  PROPERTY
  SERVICE
  LEISURE
}

enum ListingCategory {
  // Property
  RENTAL
  SALE
  ROOM
  COMMERCIAL
  
  // Service
  CLEANING
  MAINTENANCE
  RENOVATION
  MOVING
  PAINTING
  PLUMBING
  ELECTRICAL
  GARDENING
  
  // Leisure
  EVENT
  ACTIVITY
  TOUR
  CLASS
  EXPERIENCE
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  EXPIRED
  DRAFT
}

enum NewsCategory {
  GENERAL
  PROPERTY
  FINANCE
  LIFESTYLE
  TECHNOLOGY
  LOCAL
}

// Update User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Professional verification
  verificationStatus VerificationStatus @default(UNVERIFIED)
  professionalInfo   ProfessionalInfo?
  portfolio         Portfolio?
  givenReviews      Review[]

  // Chat relations
  chatRooms     UserChatRoom[]
  chatMessages  ChatMessage[]

  // Social features
  posts       Post[]      @relation("UserPosts")
  comments    Comment[]
  likes       Like[]
  shares      Share[]
  followers   Follow[]    @relation("UserFollowers")
  following   Follow[]    @relation("UserFollowing")
  
  // Profile
  bio         String?
  website     String?
  location    String?
  interests   String[]
  coverImage  String?
  
  // Stats
  postCount   Int         @default(0)
  followerCount Int       @default(0)
  followingCount Int      @default(0)
  
  // Content
  liveListings LiveListing[]
  newsArticles NewsArticle[]

  // Relations
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]     @relation("ListingOwner")
  inquiries     Inquiry[]     @relation("InquiryCreator")
  receivedInquiries Inquiry[] @relation("InquiryReceiver")
  transactions  Transaction[] @relation("TransactionUser")
  messages      Message[]     @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  notes         Note[]        @relation("NoteCreator")
}